import React, { useState } from 'react';
import {
  Box,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Stepper,
  Step,
  StepLabel,
  Typography,
  TextField,
  Alert,
  Paper,
  List,
  ListItem,
  ListItemText,
  useTheme,
} from '@mui/material';
import QRCode from 'qrcode.react';
import { LoadingButton } from '@mui/lab';
import { SecurityOutlined as SecurityIcon } from '@mui/icons-material';

interface TwoFactorSetupProps {
  open: boolean;
  onClose: () => void;
  onComplete: () => void;
}

export const TwoFactorSetup: React.FC<TwoFactorSetupProps> = ({
  open,
  onClose,
  onComplete,
}) => {
  const theme = useTheme();
  const [activeStep, setActiveStep] = useState(0);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [qrCode, setQrCode] = useState<string | null>(null);
  const [verificationCode, setVerificationCode] = useState('');
  const [backupCodes, setBackupCodes] = useState<string[]>([]);

  const steps = ['Introduction', 'Setup Authenticator', 'Verify Code', 'Backup Codes'];

  const handleNext = async () => {
    setError(null);
    setLoading(true);

    try {
      switch (activeStep) {
        case 0:
          // Generate 2FA secret and QR code
          const response = await fetch('/api/auth/2fa/setup', {
            method: 'POST',
            credentials: 'include',
          });
          const data = await response.json();
          if (!response.ok) throw new Error(data.message);
          setQrCode(data.qrCode);
          break;

        case 2:
          // Verify the code and enable 2FA
          const verifyResponse = await fetch('/api/auth/2fa/verify', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ code: verificationCode }),
            credentials: 'include',
          });
          const verifyData = await verifyResponse.json();
          if (!verifyResponse.ok) throw new Error(verifyData.message);
          setBackupCodes(verifyData.backupCodes);
          break;

        case 3:
          // Complete setup
          onComplete();
          onClose();
          return;
      }

      setActiveStep((prev) => prev + 1);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setLoading(false);
    }
  };

  const handleBack = () => {
    setActiveStep((prev) => prev - 1);
    setError(null);
  };

  const renderStepContent = () => {
    switch (activeStep) {
      case 0:
        return (
          <Box>
            <Typography variant="h6" gutterBottom>
              Enhance Your Account Security
            </Typography>
            <Typography paragraph>
              Two-factor authentication adds an extra layer of security to your account.
              Each time you sign in, you'll need to provide:
            </Typography>
            <List>
              <ListItem>
                <ListItemText
                  primary="1. Your password"
                  secondary="Your regular account password"
                />
              </ListItem>
              <ListItem>
                <ListItemText
                  primary="2. A verification code"
                  secondary="Generated by your authenticator app"
                />
              </ListItem>
            </List>
            <Typography paragraph>
              You'll need to install an authenticator app like Google Authenticator
              or Authy on your mobile device to proceed.
            </Typography>
          </Box>
        );

      case 1:
        return (
          <Box>
            <Typography variant="h6" gutterBottom>
              Scan QR Code
            </Typography>
            <Typography paragraph>
              Open your authenticator app and scan this QR code:
            </Typography>
            <Paper
              elevation={3}
              sx={{
                p: 3,
                display: 'flex',
                justifyContent: 'center',
                bgcolor: 'white',
                mb: 2,
              }}
            >
              {qrCode && <QRCode value={qrCode} size={200} />}
            </Paper>
            <Typography variant="body2" color="text.secondary">
              Can't scan the code? Contact support for alternative setup methods.
            </Typography>
          </Box>
        );

      case 2:
        return (
          <Box>
            <Typography variant="h6" gutterBottom>
              Verify Setup
            </Typography>
            <Typography paragraph>
              Enter the 6-digit code from your authenticator app to verify the setup:
            </Typography>
            <TextField
              fullWidth
              label="Verification Code"
              value={verificationCode}
              onChange={(e) => setVerificationCode(e.target.value)}
              placeholder="000000"
              inputProps={{
                maxLength: 6,
                pattern: '[0-9]*',
              }}
              sx={{ mb: 2 }}
            />
            <Typography variant="body2" color="text.secondary">
              Make sure you've saved the QR code or secret key securely.
            </Typography>
          </Box>
        );

      case 3:
        return (
          <Box>
            <Typography variant="h6" gutterBottom>
              Save Your Backup Codes
            </Typography>
            <Typography paragraph>
              Store these backup codes in a safe place. You can use them to access
              your account if you lose your authenticator device:
            </Typography>
            <Paper
              elevation={3}
              sx={{
                p: 2,
                mb: 2,
                bgcolor: theme.palette.grey[50],
                fontFamily: 'monospace',
              }}
            >
              {backupCodes.map((code, index) => (
                <Typography
                  key={index}
                  sx={{
                    mb: 1,
                    fontSize: '1.1rem',
                    letterSpacing: 1,
                  }}
                >
                  {code}
                </Typography>
              ))}
            </Paper>
            <Alert severity="warning">
              Keep these codes safe! They won't be shown again.
            </Alert>
          </Box>
        );

      default:
        return null;
    }
  };

  return (
    <Dialog
      open={open}
      onClose={onClose}
      maxWidth="sm"
      fullWidth
      PaperProps={{
        sx: {
          minHeight: '60vh',
        },
      }}
    >
      <DialogTitle sx={{ pb: 1 }}>
        <Box display="flex" alignItems="center" gap={1}>
          <SecurityIcon color="primary" />
          <Typography variant="h6">Two-Factor Authentication Setup</Typography>
        </Box>
      </DialogTitle>

      <DialogContent>
        <Stepper activeStep={activeStep} sx={{ py: 3 }}>
          {steps.map((label) => (
            <Step key={label}>
              <StepLabel>{label}</StepLabel>
            </Step>
          ))}
        </Stepper>

        {error && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {error}
          </Alert>
        )}

        {renderStepContent()}
      </DialogContent>

      <DialogActions sx={{ px: 3, pb: 2 }}>
        <Button onClick={onClose} disabled={loading}>
          Cancel
        </Button>
        {activeStep > 0 && (
          <Button onClick={handleBack} disabled={loading}>
            Back
          </Button>
        )}
        <LoadingButton
          onClick={handleNext}
          variant="contained"
          loading={loading}
        >
          {activeStep === steps.length - 1 ? 'Complete' : 'Next'}
        </LoadingButton>
      </DialogActions>
    </Dialog>
  );
};
